@{
    Trip trip = (Trip)ViewBag.Trip;
    User currentUser = ViewBag.CurrentUser;
    //bool CurrentUserOwnsTrip = currentUser.OwnsTrips(trip);
    IEnumerable<Activity> activities = trip.ActivitiesOn(ViewBag.DayNumber);
    int? day = ViewBag.DayNumber;
}
<div class="day-header">
    <h3>
        @trip.NiceDay(ViewBag.DayNumber, ViewBag.CurrentUser)
    </h3>
</div>
@if (!activities.IsNullOrEmpty())
{
    foreach (Activity activity in activities.OrderBy(a => a.TimeForSort(day)))
    {
    <div class="activity" data-activity-id="@activity.Id">
        @if (!string.IsNullOrWhiteSpace(activity.Title))
        {
            <p>
                @activity.Title
            </p>
        }
        @if (!activity.ActivityPlaces.IsNullOrEmpty())
        {
            if (activity.IsTransportation)
            {
                var places = activity.ActivityPlaces.OrderBy(ap => ap.SortIndex).Select(ap => ap.Place);

            <p>
                @(activity.TransportationType != null ? activity.TransportationType.Name + ":" : "Transportation:")
                @foreach (var place in places)
                {
                    <text><a href="@Url.Details(place)">@place.Name</a></text>                    
                }
            </p>
@*<p>
                @(activity.TransportationType != null ? activity.TransportationType.Name : "Transportation")
                @if (activity.FromPlace != null)
                {
                    <text>from <a href="@Url.Details(activity.FromPlace)">@activity.FromPlace.Name</a></text>
                }
                @if (activity.ToPlace != null)
                {
                    <text>to <a href="@Url.Details(activity.ToPlace)">@activity.ToPlace.Name</a></text>
                }
            </p>*@
            }
            else
            {
                var place = activity.ActivityPlaces.First().Place;
            <p class="place @(string.IsNullOrWhiteSpace(activity.Title) ? "no-title" : "with-title")">
                <a href="@Url.Details(place)">@place.Name</a>
            </p>
            }
        }
        <div class="when">
            @if (activity.BeginDay == activity.EndDay && activity.BeginTime.HasValue)
            {
                <text>@DateTime.Today.Add(activity.BeginTime.Value).ToShortTimeString()</text>
                if (activity.EndTime.HasValue && activity.EndTime.Value.CompareTo(activity.BeginTime.Value) != 0)
                {
                <text> - @DateTime.Today.Add(activity.EndTime.Value).ToShortTimeString()</text>
                <text> (@activity.Duration) </text>
                }
            }
            @if (activity.BeginDay != activity.EndDay)
            {
                if (activity.BeginDay == day && activity.BeginTime.HasValue)
                {
                <text>@DateTime.Today.Add(activity.BeginTime.Value).ToShortTimeString()</text>
                }
                if (day == activity.EndDay && activity.EndTime.HasValue)
                {
                <text>@DateTime.Today.Add(activity.EndTime.Value).ToShortTimeString() (end - @activity.Duration)</text>
                }
            }
        </div>
        @Helpers.TagList(Url, activity.Tags)
        @*       @if (CurrentUserOwnsTrip || true)
        {*@
        @Helpers.NoteList(Url, activity.Notes)
        @*}*@
    </div>
    }
}